
{-# LANGUAGE PartialTypeSignatures #-}

daml 1.2
module Tests.AvailableCusipTests where

import DA.List

import Main.AvailableCusip
import Main.CustomTypes

-- test:
weCanRequestAndFulfillAvailableCUSIPS =
  do
    let firstCusip = CUSIP{text="ABC123"}
    let secondCusip = CUSIP{text="ABC456"}
    let thirdCusip = CUSIP{text="DEF123"}
    let cusips = [firstCusip, secondCusip, thirdCusip]

    securitizer <- getParty "Securitizer"
    registry <- getParty "Registry"

    request <- securitizer `submit` do create AvailableCUSIPRequest with securitizer; registry; numberRequested=3

    registry `submit` do
      availableCusips <- exercise request Fulfill with cusips
      assert((length availableCusips) == 3)

      firstResultingCusip <- fetch (availableCusips!!0)
      assert(firstResultingCusip.securitizer == securitizer)
      assert(firstResultingCusip.registry == registry)
      assert(firstResultingCusip.cusip == firstCusip)

      secondResultingCusip <- fetch (availableCusips!!1)
      assert(secondResultingCusip.securitizer == securitizer)
      assert(secondResultingCusip.registry == registry)
      assert(secondResultingCusip.cusip == secondCusip)

      thirdResultingCusip <- fetch (availableCusips!!2)
      assert(thirdResultingCusip.securitizer == securitizer)
      assert(thirdResultingCusip.registry == registry)
      assert(thirdResultingCusip.cusip == thirdCusip)

-- test:
weCannotFulfillRequestWithDifferentNumberThanRequested =
  do
    let firstCusip = CUSIP{text="ABC123"}
    let secondCusip = CUSIP{text="ABC456"}
    let thirdCusip = CUSIP{text="DEF123"}
    let cusips = [firstCusip, secondCusip, thirdCusip]

    securitizer <- getParty "Securitizer"
    registry <- getParty "Registry"

    request <- securitizer `submit` do create AvailableCUSIPRequest with securitizer; registry; numberRequested=4

    registry `submitMustFail` do
      exercise request Fulfill with cusips
